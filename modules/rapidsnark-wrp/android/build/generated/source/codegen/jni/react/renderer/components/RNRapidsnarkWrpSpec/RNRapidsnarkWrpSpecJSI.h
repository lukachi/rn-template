/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GenerateModuleH.js
 */

#pragma once

#include <ReactCommon/TurboModule.h>
#include <react/bridging/Bridging.h>

namespace facebook::react {


  class JSI_EXPORT NativeRapidsnarkWrpCxxSpecJSI : public TurboModule {
protected:
  NativeRapidsnarkWrpCxxSpecJSI(std::shared_ptr<CallInvoker> jsInvoker);

public:
  virtual jsi::Value groth16Prove(jsi::Runtime &rt, jsi::String zkey, jsi::String witness, std::optional<double> proofBufferSize, std::optional<double> publicBufferSize, std::optional<double> errorBufferSize) = 0;
  virtual jsi::Value groth16ProveWithZKeyFilePath(jsi::Runtime &rt, jsi::String zkey_path, jsi::String witness, std::optional<double> proofBufferSize, std::optional<double> publicBufferSize, std::optional<double> errorBufferSize) = 0;
  virtual jsi::Value groth16Verify(jsi::Runtime &rt, jsi::String proof, jsi::String publicSignals, jsi::String verificationKey, std::optional<double> errorBufferSize) = 0;
  virtual jsi::Value groth16PublicSizeForZkeyBuf(jsi::Runtime &rt, jsi::String zkey, std::optional<double> errorBufferSize) = 0;
  virtual jsi::Value groth16PublicSizeForZkeyFile(jsi::Runtime &rt, jsi::String zkeyPath, std::optional<double> errorBufferSize) = 0;

};

template <typename T>
class JSI_EXPORT NativeRapidsnarkWrpCxxSpec : public TurboModule {
public:
  jsi::Value get(jsi::Runtime &rt, const jsi::PropNameID &propName) override {
    return delegate_.get(rt, propName);
  }

  static constexpr std::string_view kModuleName = "RapidsnarkWrp";

protected:
  NativeRapidsnarkWrpCxxSpec(std::shared_ptr<CallInvoker> jsInvoker)
    : TurboModule(std::string{NativeRapidsnarkWrpCxxSpec::kModuleName}, jsInvoker),
      delegate_(reinterpret_cast<T*>(this), jsInvoker) {}

private:
  class Delegate : public NativeRapidsnarkWrpCxxSpecJSI {
  public:
    Delegate(T *instance, std::shared_ptr<CallInvoker> jsInvoker) :
      NativeRapidsnarkWrpCxxSpecJSI(std::move(jsInvoker)), instance_(instance) {}

    jsi::Value groth16Prove(jsi::Runtime &rt, jsi::String zkey, jsi::String witness, std::optional<double> proofBufferSize, std::optional<double> publicBufferSize, std::optional<double> errorBufferSize) override {
      static_assert(
          bridging::getParameterCount(&T::groth16Prove) == 6,
          "Expected groth16Prove(...) to have 6 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::groth16Prove, jsInvoker_, instance_, std::move(zkey), std::move(witness), std::move(proofBufferSize), std::move(publicBufferSize), std::move(errorBufferSize));
    }
    jsi::Value groth16ProveWithZKeyFilePath(jsi::Runtime &rt, jsi::String zkey_path, jsi::String witness, std::optional<double> proofBufferSize, std::optional<double> publicBufferSize, std::optional<double> errorBufferSize) override {
      static_assert(
          bridging::getParameterCount(&T::groth16ProveWithZKeyFilePath) == 6,
          "Expected groth16ProveWithZKeyFilePath(...) to have 6 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::groth16ProveWithZKeyFilePath, jsInvoker_, instance_, std::move(zkey_path), std::move(witness), std::move(proofBufferSize), std::move(publicBufferSize), std::move(errorBufferSize));
    }
    jsi::Value groth16Verify(jsi::Runtime &rt, jsi::String proof, jsi::String publicSignals, jsi::String verificationKey, std::optional<double> errorBufferSize) override {
      static_assert(
          bridging::getParameterCount(&T::groth16Verify) == 5,
          "Expected groth16Verify(...) to have 5 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::groth16Verify, jsInvoker_, instance_, std::move(proof), std::move(publicSignals), std::move(verificationKey), std::move(errorBufferSize));
    }
    jsi::Value groth16PublicSizeForZkeyBuf(jsi::Runtime &rt, jsi::String zkey, std::optional<double> errorBufferSize) override {
      static_assert(
          bridging::getParameterCount(&T::groth16PublicSizeForZkeyBuf) == 3,
          "Expected groth16PublicSizeForZkeyBuf(...) to have 3 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::groth16PublicSizeForZkeyBuf, jsInvoker_, instance_, std::move(zkey), std::move(errorBufferSize));
    }
    jsi::Value groth16PublicSizeForZkeyFile(jsi::Runtime &rt, jsi::String zkeyPath, std::optional<double> errorBufferSize) override {
      static_assert(
          bridging::getParameterCount(&T::groth16PublicSizeForZkeyFile) == 3,
          "Expected groth16PublicSizeForZkeyFile(...) to have 3 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::groth16PublicSizeForZkeyFile, jsInvoker_, instance_, std::move(zkeyPath), std::move(errorBufferSize));
    }

  private:
    T *instance_;
  };

  Delegate delegate_;
};

} // namespace facebook::react
